{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ðŸš€ Starter Notebook\n",
    "\n",
    "**Environment:** Fraud Detection Sandbox (XGBoost)\n",
    "\n",
    "Welcome! This notebook is preloaded with common Data Science imports and some starter code for Exploratory Data Analysis (EDA) and plotting.\n",
    "\n",
    "## Tips\n",
    "- Use `Shift+Enter` to run a cell\n",
    "- Add new cells with the `+` button in the toolbar\n",
    "- Modify imports or starter code as needed\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ðŸ“¦ Common Data Science Imports\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "\n",
    "print('âœ… Common DS imports loaded')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ðŸ¤– Framework-Specific Imports (XGBoost)\n",
    "import xgboost as xgb\n",
    "print('âœ… XGBoost imported, version:', xgb.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ðŸ“‚ Load Example Dataset\n",
    "df = sns.load_dataset('iris')\n",
    "print('Dataset shape:', df.shape)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ðŸ“Š EDA Skeleton\n",
    "print('--- Dataset Info ---')\n",
    "print(df.info())\n",
    "\n",
    "print('\\n--- Summary Statistics ---')\n",
    "print(df.describe())\n",
    "\n",
    "print('\\n--- Missing Values ---')\n",
    "print(df.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ðŸ“ˆ Plotting Stub\n",
    "sns.set(style=\"whitegrid\")\n",
    "plt.figure(figsize=(8,4))\n",
    "sns.histplot(df['sepal_length'], kde=True)\n",
    "plt.title('Sepal Length Distribution')\n",
    "plt.show()\n",
    "\n",
    "# Scatterplot Example\n",
    "sns.scatterplot(x='sepal_length', y='petal_length', hue='species', data=df)\n",
    "plt.title('Sepal vs Petal Length')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ðŸ§  Your Code Starts Here\n",
    "# Train/test split example:\n",
    "X = df.drop('species', axis=1)\n",
    "y = df['species']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# XGBoost DMatrix\n",
    "dtrain = xgb.DMatrix(X_train, label=y_train)\n",
    "dtest = xgb.DMatrix(X_test, label=y_test)\n",
    "\n",
    "print('Train and test data prepared.')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
